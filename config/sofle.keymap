#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    homerow: homerow {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        flavor = "balanced";
        hold-trigger-key-positions = <27 28 29 30 34 35 36 37>;
    };

    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <34 35 36>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <47 48 49>;
        };

        Copy {
            bindings = <&kp RC(C)>;
            key-positions = <30 29 28>;
        };

        Paste {
            bindings = <&kp RC(V)>;
            key-positions = <43 42 41>;
        };

        ctl-z {
            bindings = <&kp LC(Z)>;
            key-positions = <27 28 29>;
        };

        Cut {
            bindings = <&kp RC(X)>;
            key-positions = <15 16 17>;
        };

        Select-all {
            bindings = <&kp RC(A)>;
            key-positions = <2 3 4>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&homerow LEFT_SHIFT F>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1                 &kp N2               &kp N3               &kp N4            &kp N5       &kp UP_ARROW     &kp N6         &kp N7                    &kp N8               &kp N9               &kp N0                    &kp BACKSPACE
&kp TAB           &kp Q                  &kp W                &kp E                &kp R             &kp T        &kp DOWN_ARROW   &kp Y          &kp U                     &kp I                &kp O                &kp P                     &kp BSLH
&kp LEFT_CONTROL  &homerow LEFT_SHIFT A  &homerow LEFT_WIN S  &homerow LEFT_ALT D  &homerow RCTRL F  &kp G        &kp LEFT_ARROW   &kp H          &homerow RIGHT_CONTROL J  &homerow LEFT_ALT K  &homerow LEFT_WIN L  &homerow LEFT_SHIFT SEMI  &kp APOS
&kp LSHFT         &kp Z                  &kp X                &kp C                &kp V             &kp B        &kp RIGHT_ARROW  &kp N          &kp M                     &kp COMMA            &kp DOT              &kp FSLH                  &kp EQUAL
&kp C_MUTE        &kp LCTRL              &kp LEFT_GUI         &kp LEFT_ALT         &mo 1             &kp SPACE    &kp ENTER        &kp BACKSPACE  &kp ENTER                 &mo 2                &kp RIGHT_SHIFT      &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7             &kp F8        &kp F9     &kp F10           &kp DEL
&trans      &kp GRAVE        &mkp RCLK       &mkp MCLK        &mkp LCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END            &kp UP        &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans          &trans           &kp ENTER        &mkp MB5           &mmv MOVE_LEFT   &kp LEFT_ARROW   &kp DOWN           &kp UP_ARROW  &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD    &kp INSERT    &kp F11    &kp F12           &trans
&kp C_MUTE  &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &kp DEL          &kp RC(BACKSPACE)  &trans        &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &mmv MOVE_UP     &kp F6    &kp F7    &kp F8        &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &out OUT_USB  &bt BT_CLR_ALL    &mmv MOVE_DOWN   &kp F11   &kp F12   &kp UP_ARROW  &trans     &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &out OUT_BLE  &bt BT_CLR        &mmv MOVE_LEFT   &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans            &mmv MOVE_RIGHT  &trans    &trans    &sys_reset    &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans            &mkp LCLK        &trans    &trans    &trans        &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
